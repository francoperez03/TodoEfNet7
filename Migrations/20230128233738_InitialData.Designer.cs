// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoEfNet7;

#nullable disable

namespace TodoEfNet7.Migrations
{
  [DbContext(typeof(TaskContext))]
  [Migration("20230128233738_InitialData")]
  partial class InitialData
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "7.0.2")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

      modelBuilder.Entity("TodoEfNet7.Models.Category", b =>
          {
            b.Property<Guid>("CategoryId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<string>("Description")
                      .HasColumnType("text");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(50)
                      .HasColumnType("character varying(50)");

            b.Property<int>("Weight")
                      .HasColumnType("integer");

            b.HasKey("CategoryId");

            b.ToTable("Category", (string)null);

            b.HasData(
                      new
                      {
                        CategoryId = new Guid("e3799547-fa23-450c-86a5-35dd27f685e9"),
                        Name = "Actividades pendientes",
                        Weight = 20
                      },
                      new
                      {
                        CategoryId = new Guid("4d7c7344-73a4-4ced-9bd6-93591a400254"),
                        Name = "Actividades personales",
                        Weight = 50
                      });
          });

      modelBuilder.Entity("TodoEfNet7.Models.Task", b =>
          {
            b.Property<Guid>("TaskId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uuid");

            b.Property<Guid>("CategoryId")
                      .HasColumnType("uuid");

            b.Property<DateTime>("CreationDate")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("Description")
                      .HasColumnType("text");

            b.Property<int>("PriorityTask")
                      .HasColumnType("integer");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasMaxLength(200)
                      .HasColumnType("character varying(200)");

            b.Property<DateTime>("UpdateTime")
                      .HasColumnType("timestamp with time zone");

            b.HasKey("TaskId");

            b.HasIndex("CategoryId");

            b.ToTable("Task", (string)null);

            b.HasData(
                      new
                      {
                        TaskId = new Guid("a4a744c3-e994-458d-b260-0b896b752192"),
                        CategoryId = new Guid("e3799547-fa23-450c-86a5-35dd27f685e9"),
                        CreationDate = new DateTime(2023, 1, 28, 20, 37, 38, 275, DateTimeKind.Local).AddTicks(8210),
                        PriorityTask = 1,
                        Title = "Pago de servicios publicos",
                        UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                      },
                      new
                      {
                        TaskId = new Guid("673f244d-657b-46fe-a7fc-fe1fbe3e542e"),
                        CategoryId = new Guid("4d7c7344-73a4-4ced-9bd6-93591a400254"),
                        CreationDate = new DateTime(2023, 1, 28, 20, 37, 38, 275, DateTimeKind.Local).AddTicks(8240),
                        PriorityTask = 0,
                        Title = "Terminar de ver peliculas en Netflix",
                        UpdateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                      });
          });

      modelBuilder.Entity("TodoEfNet7.Models.Task", b =>
          {
            b.HasOne("TodoEfNet7.Models.Category", "Category")
                      .WithMany("Tasks")
                      .HasForeignKey("CategoryId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Category");
          });

      modelBuilder.Entity("TodoEfNet7.Models.Category", b =>
          {
            b.Navigation("Tasks");
          });
#pragma warning restore 612, 618
    }
  }
}
